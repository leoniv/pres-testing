= Автоматизированное тестирование "Физический уровень"
Leonid Vlasov

== Вступление

> Автор не является специалистом в области тестирования ПО и не знает всех
академических терминов и определений этой области. Данный материал является
взглядом на тестирование со стороны программиста, т.е. того человека который
составляет *физический* текст программы. Данный материал основан на знаниях
полученных в процессе самостоятельного изучения данной темы по не
"академическим" источникам, исследовании чужого опыта на примере исходных
текстов и личном опыте составления тестов для платформ
Ruby и 1С:Предприятие.

<<<

> Под автоматизированным тестированием, в контексте этого документа,
следует понимать процесс тестирования ПО с помощью набора программ - тестов
которые выполняются, *исключительно*, без участия человека. Участие человека
допустимо лишь при запуске процесса тестирования.

<<<

В литературе встречаются три вида тестов которые я бы отнес к *"Физическому"*
уровню тестирования.

- *Модульные (Unit) тесты* - тестируется абсолютно изолированный код
- *Интеграционные тесты* - тестируется код в окружении близком к рабочему
- *Тесты интерфейса пользователя* - если тестируется интерфейс командной строки
тогда его можно полностью покрыть авто-тестами но если тестируется графический
интерфейс то можно тестировать только ту часть которая касается низкого уровня
реализации интерфейса. На пример тестирование кода обработчиков,
наличие и значения свойств виджетов (статика), значения виджетов (динамика).

Часто нет *возможности* или *необходимости* проведения четких границы между этими
видами тестов.

*Возможность* определяется ограничениями программной платформы, а
*необходимость* здравым смыслом.

На самом деле все достаточно индивидуально.

== Цель и возможности

*Цель тестирования* - пройти всеми закоулками кода (графа управления). Другими
словами необходимо создать тесты для каждого метода и вызвать этот метод со
всеми возможными вариантами его аргументов. На сколько достижима такая цель это
уже отдельный вопрос.

*Что можно выяснить в результате?* - исключительно, "физическую"
работоспособность программы и "физический" результат её выполнения, но это уже
не мало и наверное составляет самый значимый кусок во всей системе тестирования.
Проверка прочих аспектов не входит в зону данного уровня
тестирования.

*Что значит "физический"?* - между программистом и заказчиком находится большой
"слой абстракций". Заказчик описывает логическое поведение программы, а
программист пишет физическую реализацию.

*Кто пишет тесты?* - программист! Могут и другие лица но, кроме прочего,
программист лично заинтересован в автоматизации так как выполняет много раз
один и тот же рабочий цикл *правка* -> *прогон* -> *проверка* -> *правка* -> ...

== Определения и тезисы

- *Код (объект) под тестом* - код который проверяется в ходе теста.
- *Набор тестов* - "Test case", "Test suite", исполняемая программа содержащая
группу тестов. В minitest это экземпляр класса.
- *Тест* - исполняемая программа которая запускает код находящийся под тестом
и запускает проверку результата его выполнения. В minitest это метод экземпляра
класса.
- *Дымовой тест* - подмножество *Тест* но без проверки выполнения.
- *Проверка выполнения* - исполняемая программа проверяющая корректность
исполнения кода под тестом. Делится на два вида - проверка *состояния* и
проверка *поведения*. Подробности далее.
- *Изоляция* - стоит разделить на *изоляцию кода* и *изоляцию тестов*.
Подробности далее.
- *Тест-дублер* - не является тестируемым объектом. Применяется вместо реального
объекта для изоляции кода и (или) проверки поведения. Подробности далее.
- *Тестируемость кода* - свойство текста программы. Код должен быть
"тестируемым" то есть должен быть составлен таким образом, что для него можно
написать несложный набор тестов.

== Граф управления и уровни покрытия кода

[cols=3*a,separator=;]
|===
;Метод `foo()`
[source,ruby,numbered]
----
def foo(a)
  if a <= 5 <1>
    r = '( .. 5]' <2>
  elsif a > 10 <3>
    r = '(10 .. )' <4>
  else <5>
    r = '(5 .. 10]' <6>
  end <7>

  return r <8>
end
----
;Граф управления `foo()`
[svgbob, width=100%, height=100%]
..................................................
            +---------------+
          +-| if a <= 5 (1) |-+
          | +---------------+ |
          |                   |
          V                   V
 +-----------------+     +----------------+
 |r = '( .. 5]' (2)|   +-|elsif a > 10 (3)|-+
 +-----------------+   | +----------------+ |
          |            |                    |
          |            V                    V
          |    +------------------+    +---------+
          |    |r = '(10 .. )' (4)|    | else (5)|
          |    +------------------+    +---------+
          |          |                      |
          |          V                      |
          |  +-----------+                  |
          +->| endif (7) |<-----------------+
             +-----------+
                    |
                    V
             +--------------+
             | return r (8) |
             +--------------+
..................................................
;Тесты для `foo()`
[source,ruby,numbered]
----
describe '#foo' do
  it 'when a < 5' do
    foo(4).must_equal '( .. 5]'
  end

  it 'when a == 5' do
    foo(4).must_equal '( .. 5]'
  end

  it 'when a > 10' do
    foo(11).must_equal '(5 .. 10]'
  end

  it 'when a == 10' do
    foo(10).must_equal '(5 .. 10]'
  end

  it 'when 5 =< a < 10' do
    foo(7).must_equal '(5 .. 10]'
  end
end
----
|===

== Slide FIXME

== Изоляция и тест-дублеры

FIXME

=== Пример полной изоляции

FIXME

== Проверка выполнения

FIXME ассертации, моки

== Нотации тестов

FIXME test_ spec gerkin
