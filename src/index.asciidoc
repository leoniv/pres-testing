= Автоматизированное тестирование "Физический уровень"
Leonid Vlasov

== Вступление

> Автор не является специалистом в области тестирования ПО и не знает всех
академических терминов и определений этой области. Данный материал является
взглядом на тестирование со стороны программиста, т.е. того человека который
составляет *физический* текст программы. Данный материал основан на знаниях
полученных в процессе самостоятельного изучения данной темы по не
"академическим" источникам, исследовании чужого опыта на примере исходных
текстов и личном опыте составления тестов для платформ
Ruby и 1С:Предприятие.

<<<

> Под автоматизированным тестированием, в контексте этого документа,
следует понимать процесс тестирования ПО с помощью набора программ - тестов
которые выполняются, *исключительно*, без участия человека. Участие человека
допустимо лишь при запуске процесса тестирования.

<<<

В литературе встречаются три вида тестов которые я бы отнес к *"Физическому"*
уровню тестирования.

- *Модульные (Unit) тесты* - тестируется абсолютно изолированный код
- *Интеграционные тесты* - тестируется код в окружении близком к рабочему
- *Тесты интерфейса пользователя* - если тестируется интерфейс командной строки
тогда его можно полностью покрыть авто-тестами но если тестируется графический
интерфейс то можно тестировать только ту часть которая касается низкого уровня
реализации интерфейса. На пример тестирование кода обработчиков,
наличие и значения свойств виджетов (статика), значения виджетов (динамика).

Часто нет *возможности* или *необходимости* проведения четких границы между этими
видами тестов.

*Возможность* определяется ограничениями программной платформы, а
*необходимость* здравым смыслом.

На самом деле все достаточно индивидуально.

== Цель и возможности

*Цель тестирования* - пройти всеми закоулками кода (графа управления). Другими
словами необходимо создать тесты для каждого метода и вызвать этот метод со
всеми возможными вариантами его аргументов и условий в операторах ветвления и
цикла. На сколько достижима такая цель это уже отдельный вопрос.

*Что можно выяснить в результате?* - исключительно, "физическую"
работоспособность программы и "физический" результат её выполнения, но это уже
не мало и наверное составляет самый значимый кусок во всей системе тестирования.
Проверка прочих аспектов не входит в зону данного уровня
тестирования.

*Что значит "физический"?* - между программистом и заказчиком находится большой
"слой абстракций". Заказчик описывает логическое поведение программы, а
программист пишет физическую реализацию.

*Кто пишет тесты?* - программист! Могут и другие лица но, кроме прочего,
программист лично заинтересован в автоматизации так как выполняет много раз
один и тот же рабочий цикл *правка* -> *прогон* -> *проверка* -> *правка* -> ...

== Определения и тезисы

- *Код (объект) под тестом* - код который проверяется в ходе теста.
- *Набор тестов* - "Test case", "Test suite", исполняемая программа содержащая
группу тестов. В minitest это экземпляр класса.
- *Тест* - исполняемая программа которая запускает код находящийся под тестом
и запускает проверку результата его выполнения. В minitest это метод экземпляра
класса.
- *Дымовой тест* - подмножество *Тест* но без проверки выполнения.
- *Проверка выполнения* - исполняемая программа проверяющая корректность
исполнения кода под тестом. Делится на два вида - проверка *состояния* и
проверка *поведения*. Подробности далее.
- *Изоляция* - стоит разделить на *изоляцию кода* и *изоляцию тестов*.
Подробности далее.
- *Тест-дублер* - не является тестируемым объектом. Применяется вместо реального
объекта для изоляции кода и (или) проверки поведения. Подробности далее.
- *Тестируемость кода* - свойство текста программы. Код должен быть
"тестируемым" то есть должен быть составлен таким образом, что для него можно
написать несложный набор тестов.

== Граф управления и уровни покрытия кода

[cols=2*a,separator=;]
|===
;Метод `foo()`
[source,ruby,numbered]
----
def foo(a)
  if a <= 5 <1>
    r = '( .. 5]' <2>
  elsif a > 10 <3>
    r = '(10 .. )' <4>
  else <5>
    r = '(5 .. 10]' <6>
  end <7>

  return r <8>
end
----
;Граф управления `foo()`
[svgbob, width=100%, height=100%]
..................................................
            +---------------+
          +-| if a <= 5 (1) |-+
          | +---------------+ |
          |                   |
          V                   V
 +-----------------+     +----------------+
 |r = '( .. 5]' (2)|   +-|elsif a > 10 (3)|-+
 +-----------------+   | +----------------+ |
          |            |                    |
          |            V                    V
          |    +------------------+    +---------+
          |    |r = '(10 .. )' (4)|    | else (5)|
          |    +------------------+    +---------+
          |          |                      |
          |          |             +--------------------+
          |          |             | r = '(5 .. 10]' (6)|
          |          |             +--------------------+
          |          V                      |
          |  +-----------+                  |
          +->| endif (7) |<-----------------+
             +-----------+
                    |
                    V
             +--------------+
             | return r (8) |
             +--------------+
..................................................
|===

.Метод `foo(a)` имеет:
- путей 3
- вариантов значений аргумента `a` - бесконечность
- граничных значений аргумента `a` - два 5 и 10

<<<

Покрытие кода подразумевает оценку степени того насколько подробно тесты
прошли по графу управления и насколько подробно выполнились условные операторы.

.Уровни покрытия согласно https://ru.wikipedia.org/wiki/Покрытие_кода[ru.wikipedia.org]
- покрытие операторов — каждая ли строка исходного кода была выполнена;
- покрытие условий — каждая ли точка решения (вычисления истинно ли или ложно выражение) была выполнена;
- покрытие путей — все ли возможные пути через заданную часть кода были выполнены;
- покрытие функций — каждая ли функция программы была выполнена;
- покрытие вход/выход — все ли вызовы функций и возвраты из них были выполнены.
- покрытие значений параметров — все ли типовые и граничные значения параметров были проверены.

<<<

[cols=2*a,separator=;]
|===
;Граф управления `foo()`
[svgbob, width=100%, height=100%]
..................................................
            +---------------+
          +-| if a <= 5 (1) |-+
          | +---------------+ |
          |                   |
          V                   V
 +-----------------+     +----------------+
 |r = '( .. 5]' (2)|   +-|elsif a > 10 (3)|-+
 +-----------------+   | +----------------+ |
          |            |                    |
          |            V                    V
          |    +------------------+    +---------+
          |    |r = '(10 .. )' (4)|    | else (5)|
          |    +------------------+    +---------+
          |          |                      |
          |          |             +--------------------+
          |          |             | r = '(5 .. 10]' (6)|
          |          |             +--------------------+
          |          V                      |
          |  +-----------+                  |
          +->| endif (7) |<-----------------+
             +-----------+
                    |
                    V
             +--------------+
             | return r (8) |
             +--------------+
..................................................
;Покрытие всех путей графа `foo()` + граничные случаи
[source,ruby,numbered]
----
describe '#foo' do
  it 'when a < 5' do
    foo(4).must_equal '( .. 5]'
  end

  it 'when a == 5' do
    foo(4).must_equal '( .. 5]'
  end

  it 'when a > 10' do
    foo(11).must_equal '(10 .. )'
  end

  it 'when a == 10' do
    foo(10).must_equal '(5 .. 10]'
  end

  it 'when 5 =< a < 10' do
    foo(7).must_equal '(5 .. 10]'
  end
end
----
|===

Для минимального покрытия метода `foo(a)` необходимо 5 тестов для 3-х путей и
двух граничных случаев аргумента `a`. При этом, для значений `a` из диапазонов
можно использовать случайные значения. Так же для значений из диапазонов
можно использовать массивы значений но это вряд ли имеет смысл.

<<<

.Выводы

1. *Утилиты типа `Code Coverage` способны распознать только степень покрытия
операторов*. Более полное покрытие кода лежит на совести программиста и
контролировать это очень сложно или вообще невозможно.
2. *Текст программы (метода) должен быть простым* для того, чтобы программист мог
представить в своей голове граф управления и написать тесты покрывающие все
пути этого графа
3. *Условия в условных операторах должны быть достаточно простыми*
1. *Текст тестов значительно больше текста программы*
3. *Часто невозможно перебрать все возможные значения аргументов и условий*.
Однако всегда надо стараться использовать все граничные случаи т.к. они обычно
считанные.

== Изоляция и тест-дублеры

.*Изоляция кода*

Для классических модульных тестов предполагается, что код модуля полностью
изолирован от внешнего окружения. Это позволяет:

- разорвать зависимости от внешних объектов не предназначенных для тестирования
- упростить настройку тестового окружения
- вести параллельную разработку отдельных модулей договорившись об их интерфейсах

*На практике это требование бывает сложно реализовать*.

.*Техники изоляции*
- на уровне дизайна кода - передавать зависимости в параметрах
- использование тест-дублеров
- "замокивание" или "застабливание" контекста объекта под тестом

.*Изоляция тестов*
- каждый тест выполняется в чистом контексте
- каждый тест перед выполнением создает и очищает окружение
- тесты запускаются в произвольном порядке

<<<

.*тест-дублеры*
- *dumy* - используются только для только для заполнения параметров метода.
По сути, можно использовать любое значение (я обычно использую `nil`)
- *fake* - реально реализованные объекты которые нельзя использовать в продакшн
на пример реальные объекты с переопределенными методами, использование
упрощенных СУБД таких как `sqlite` и т.п.
- *stub* - чистый дублер - объект реализующий интерфейс реального объекта в той
части на сколько это необходимо для теста и возвращающий заранее заготовленные
значения
- *mock* - очень похож на *stub* но предназначен для проверки поведения кода

*неадекватность дублера* - основная проблема использования тест-дублеров

<<<

.*Пример полной изоляции с использованием `dumy` и `stub`*
[cols=2*a]
|===
|Код
[source, ruby, numbered]
----
class С
  def buzz
    return 'buzz'
  end

  def foo(bar, bzz = true)
    if bzz
      return bar.listen(buzz)
    end
    return bzz
  end
end
----
|Тест метода `foo()` используется только проверка состояния
[source, ruby, numbered]
----
describe C do
  describe '#foo' do
    it 'when bzz == true' do
      bar = mock
      bar.stub(:listen => :listen_result)
      inst = C.new
      inst.stub(:buzz => :buzz)
      inst.foo(bar).must_equal :listen_result
    end

    it 'when bzz == false' do
      inst.foo(nil, false).must_equal false
    end
  end
end
----
|===

== Проверка выполнения

.Проверка выполнения кода делится на две группы
- проверка состояния
- проверка поведения

.*Проверка состояния*
Проверяется возвращаемые значения или состояние объекта после вызова.

Для проверки используются методы "ассертации" предоставляемые библиотеками
тестирования. Проверка может быть позитивной и негативной. Самым ранним
известным является макрос `assert` языка *C*. Позитивные проверки ожидают на
входе истинность условия, негативные ложность.

Имена методов зависят от библиотеки и используемой нотации.

[sourse, ruby, numbered]
----
assert true, 'Упадет если подать false' <1>
refute false, 'Упадет если подать true' <2>

assert_equal 'Expected', 'Actual', 'Ожидает Expected == Actual' <3>
'Expected'.must_equal 'Actual', 'Ожидает Expected == Actual' <4>

refute_equal 'Expected', 'Actual', 'Ожидает Expected != Actual' <5>
'Expected'.wont_equal 'Actual', 'Ожидает Expected != Actual' <6>
----

<<<

.*Проверка поведения*
Проверка поведения выполняется с помощью `mock` тест-дублеров и "замокиванием"
контекста. Кроме того проверка поведения выполняется с помощью ассертаций
ожидающих вызов исключения.

<<<

.*Проверка поведения*
[cols=2*a]
|===
|Код
[source, ruby, numbered]
----
class С
  def buzz
    return 'buzz'
  end

  def foo(bar, bzz = :yes)
    if bzz == :yes
      return bar.listen(buzz)
    elsif bzz == :no
      return bzz
    end

    fail ArgumentError, "Invalid bzz: `#{bz}`"
  end
end
----
|Тест метода `foo()`
[source, ruby, numbered]
----
describe C do
  describe '#foo' do
    it 'when bzz == :yes' do
      bar = mock
      bar.expects(:listen)
        .with(:buzz).returns(:listen_result)
      inst = C.new
      inst.expects(:buzz).returns(:buzz)
      inst.foo(bar).must_equal :listen_result
    end

    it 'when bzz == :no' do
      bar = mock
      bar.expects(:listen).never
      inst.expects(:buzz).never
      inst.foo(bar, :no).must_equal :no
    end

    it 'fail ArgumentError' do
      bar = mock
      bar.expects(:listen).never
      inst.expects(:buzz).never
      e = proc {
        inst.foo(nil, :ivalid)
      }.must_raise ArgumentError
      e.message.must_match /Invalid bzz:/i
    end
  end
end
----
|===

== Нотации тестов

.*Классически тесты*
[source, ruby, numbered]
----
class FooTest < Minitest::Test
  def test_one
    assert_equal 'Expected', 'Actual'
  end

  def test_two
    assert_equal 'Expected', 'Actual'
  end
end
----

.Недостатки
- сложность организации при большом количестве тестов
- очень низкая информативнось

<<<

.*Spec нотация*

Используется DSL описания спецификаций

[source, ruby, numbered]
----
describe Foo do
  describe '#bar' do
    it 'when ...' do
      'Actual'.wont_equal 'Expected'
    end
  end

  describe '#buzz' do
    it 'when ...' do
      'Actual'.must_be :==, 'Actual'
    end
  end
end
----

.*Преимущества*
- гибкая организация тестов
- хорошая информативность
- можно использовать для документирования спецификаций кода

<<<

.https://cucumber.io/[Cucumber]
Использовать Cucumber на данном уровне тестирования неправильно!

Состоит из двух частей:

- описание функционала на человеческом языке с использованием DSL
https://github.com/cucumber/cucumber/wiki/Gherkin[Gherkin]
- реализация шагов - тестов на языке программирования

[cols=2*a, separator=;]
|===
;Gerkin
[source, numbered]
----
Feature: Eating too many cucumbers may not be good for you

  Eating too much of anything may not be good for you.

  Scenario: Eating a few is no problem
    Given Alice is hungry
    When she eats 3 cucumbers
    Then she will be full
----
;Реализация шагов
[source, ruby, numbered]
----
Given(/(\S+) is hungry/) do |who|
  @who = who
end

When(/she eats (\d+) cucumbers/) do |count|
  @count = count
end

Then("she will be full") do
  puts "#{@who} says:"\
    " 'Thanks for #{@count} cucumbers'"
end
----
|===

<<<

.*Вывод Cucumber*
----
Feature: Eating too many cucumbers may not be good for you
  Eating too much of anything may not be good for you.

  Scenario: Eating a few is no problem # features/one.feature:7
    Given Alice is hungry              # features/step_definitions/she.rb:1
    When she eats 3 cucumbers          # features/step_definitions/she.rb:5
    Then she will be full              # features/step_definitions/she.rb:9
      Alice says: 'Thanks for 3 cucumbers'

1 scenario (1 passed)
3 steps (3 passed)
0m0.008s
----

.*Недостатки*
- очень много текста

.*Преимущества*
- хорошая информативность
- создан специально для документирования спецификаций (Gherkin) и проверки этих
спецификаций программой (Реализации шагов)
- существуют авто-генераторы документации, на пример https://relishapp.com/[RelishApp]

== TDD

*TDD* - test driven development - техника при которой сначала пишут тесты, как
спецификацию будущего кода, а потом пишут код под эти тесты.

Звучит великолепно но на практике сложно пользоваться. Нужен большой опыт.

При таком подходе тест может писать не программист, а заказчик или руководитель.
Такой тест будет заданием для программиста.

Однако так может работать и сам программист. Это помогает организовать работу и
не забывать то, что необходимо реализовать.
