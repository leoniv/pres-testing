= Автоматизированное тестирование "Физический уровень"
Leonid Vlasov

== Вступление

> Автор не является специалистом в области тестирования ПО и не знает всех
академических терминов и определений этой области. Данный материал является
взглядом на тестирование со стороны программиста, т.е. того человека который
составляет *физический* текст программы. Данный материал основан на знаниях
полученных в процессе самостоятельного изучения данной темы по не
"академическим" источникам, исследовании чужого опыта на примере исходных
текстов программ и тестов и личном опыте составления тестов для платформ
Ruby и 1С:Предприятие.

<<<

В литературе встречаются три вида тестов которые я бы отнес к *"Физическому"*
уровню тестирования.

- Модульные (Unit) тесты
- Интеграционные тесты
- Тесты интерфейса пользователя

*Цель тестирования* - пройти всеми закоулками кода (графа управления).

*Кто пишет тесты?* - программист! Могут и прочие лица но, кроме прочего,
программист лично заинтересован в автоматизации так как выполняет много раз
один и тот же рабочий цикл *правка* -> *прогон* -> *проверка* -> *правка* -> ...

== Определения и тезисы

- *Код (объект) под тестом* - код который проверяется в ходе теста.
- *Набор тестов* - "Test case", "Test suite", исполняемая программа содержащая
группу тестов. В minitest это экземпляр класса.
- *Тест* - исполняемая программа которая запускает тестируемый код и запускает
проверку результата его выполнения. В minitest это метод экземпляра класса.
- *Дымовой тест* - подмножество *Тест* но без проверки выполнения.
- *Проверка выполнения* - исполняемая программа проверяющая корректность
исполнения кода под тестом. Делится на _статическую_ и _поведения_. Подробности
далее.
- *Тест-дублер* - не является тестируемым объектом. Применяется вместо реального
объекта для изоляции тестируемого кода. Подробности далее.
- *Изоляция* - стоит разделить на _Изоляцию кода_ и _Изоляцию тестов_.
Подробности далее.
- *Тестируемость кода* - свойство текста программы. Код должен быть
"тестируемым" то есть должен быть составлен таким образом, что для него можно
написать несложный текст теста.

== Граф управления и уровни покрытия

[cols=2*a,separator=;]
|===
;Метод
[source,ruby,numbered]
----
def foo(a)
  if a <= 5 <1>
    result = '( .. 5]' <2>
  elsif a > 10 <3>
    result = '(10 .. )' <4>
  else <5>
    result = '(5 .. 10]' <6>
  end <7>

  return result <8>
end
----
;Граф управления
[ditaa, scale=2]
..................................................
                   +-------------+
                   | Asciidoctor |-------+
                   |   diagram   |       |
                   +-------------+       | PNG out
                       ^                 |
                       | ditaa in        |
                       |                 v
 +--------+   +--------+----+    /---------------\
 |        | --+ Asciidoctor +--> |               |
 |  Text  |   +-------------+    |   Beautiful   |
 |Document|   |   !magic!   |    |    Output     |
 |     {d}|   |             |    |               |
 +---+----+   +-------------+    \---------------/
     :                                   ^
     |          Lots of work             |
     +-----------------------------------+
..................................................
|===


== Slide FIXME


== Изоляция и тест-дублеры

FIXME
